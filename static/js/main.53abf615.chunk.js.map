{"version":3,"sources":["NumberDisplay.jsx","Grid.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NumberDisplay","react_default","a","createElement","className","this","props","hidden","undefined","onClick","value","Component","Grid","isNumberAtXY","x","y","it","type","createTable","table","_this","rows","row","cols","content","React","Children","map","children","child","filter","find","push","key","Outcome","Object","freeze","Ready","Win","Lose","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","random","max","Math","floor","beforeGame","initRound","window","setTimeout","startRound","timeToView","numbers","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Array","maxNumber","keys","Symbol","iterator","next","done","i","numberAssigned","_loop","rx","ry","err","return","setState","lastClick","outcome","state","assign","clickedOn","number","unhide","numberBefore","_this2","forEach","_ref","src_NumberDisplay","outcomeClass","src_Grid","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.53abf615.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NumberDisplay extends Component {\r\n  render() {\r\n    return (\r\n    <p className={this.props.hidden ? \"hidden\" : undefined} onClick={this.props.onClick}>{this.props.value}</p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumberDisplay;\r\n","import React, { Component } from 'react';\r\nimport NumberDisplay from './NumberDisplay.jsx';\r\n\r\nclass Grid extends Component {\r\n\r\n  isNumberAtXY = (x, y) => (it) => it.type === NumberDisplay && it.props.x === x && it.props.y === y;\r\n\r\n  createTable = () => {\r\n    let table = []\r\n\r\n    // TODO should be possible to write this as some nice functional expression\r\n    for (let y = 0; y < this.props.rows; y++) {\r\n      let row = []\r\n      for (let x = 0; x < this.props.cols; x++) {\r\n        const numbers = React.Children.map(this.props.children, child => child).filter(this.isNumberAtXY(x, y));\r\n        const content = numbers.find((it) => true);\r\n        row.push(<td key={x + \",\" + y}>{content}</td>);\r\n      }\r\n      table.push(<tr key={y}>{row}</tr>);\r\n    }\r\n\r\n    return table\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          {this.createTable()}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Grid from './Grid.jsx';\nimport NumberDisplay from './NumberDisplay.jsx';\n\nconst Outcome = Object.freeze({\"Ready\": 1, \"Win\": 2, \"Lose\": 3});\n\nclass App extends Component {\n\n  // React interface\n\n  constructor(props) {\n    super(props);\n    this.timeToView = 500;\n    this.maxNumber = 5;\n    this.state = {\n      numbers: [], \n      lastClick: undefined,\n      outcome: undefined\n    };    \n  }\n\n  random = (max) => Math.floor(Math.random() * max);\n\n  componentDidMount() {\n    this.beforeGame();\n  }  \n\n  render() {\n    let numbers = [];\n    this.state.numbers.forEach(({value, x, y, hidden}) => {\n      numbers.push(<NumberDisplay value={value} x={x} y={y} hidden={hidden} key={x + \",\" + y} onClick={this.clickedOn(value)} />)\n    });\n\n    let outcomeClass = undefined;\n    switch (this.state.outcome) {\n      case Outcome.Lose:\n        outcomeClass = \"lose\";\n        break;\n      case Outcome.Win:\n        outcomeClass = \"win\";\n        break;\n      default:\n    }\n\n    return (\n      <div className={outcomeClass}>\n        <Grid rows=\"5\" cols=\"8\">{numbers}</Grid>\n      </div>\n    );\n  }\n\n  // internal logic\n\n  beforeGame = () => {\n    this.initRound();\n    window.setTimeout(this.startRound, this.timeToView);\n  };\n\n  initRound = () => {\n    let numbers = [];\n    // TODO there has to be a nicer way of doing this\n    for (const i of Array(this.maxNumber).keys()) {\n      let numberAssigned = false;      \n      do {\n        const rx = this.random(8);\n        const ry = this.random(5);\n        numberAssigned = !numbers.find(it => it.x === rx && it.y === ry);\n        if (numberAssigned) {\n          numbers.push({value: i + 1, x: rx, y: ry, hidden: false});\n        }\n      } while(!numberAssigned);      \n    }\n\n    this.setState({\n      numbers,\n      lastClick: undefined,\n      outcome: undefined\n    });\n  }\n\n  startRound = () => {\n    this.setState({\n      numbers: this.state.numbers.map(it => Object.assign(it, {hidden: true})),\n      outcome: Outcome.Ready\n    });\n  }\n\n  unhide(number) {\n   this.setState({numbers: this.state.numbers.map(it => it.value !== number ? it : Object.assign(it, {hidden: false}))});\n  }\n\n  clickedOn = (number) => () => {\n    if (this.state.outcome !== Outcome.Ready)\n      return;\n\n    this.unhide(number);\n\n    const numberBefore = (number > 1) ? number - 1 : undefined;\n    if (this.state.lastClick !== numberBefore) {\n      this.setState({outcome: Outcome.Lose});\n    } else {\n      if (number < this.maxNumber) {\n        this.setState({lastClick: number});\n      } else {\n        this.setState({outcome: Outcome.Win});\n        window.setTimeout(this.beforeGame, 500);\n      }\n    }    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}